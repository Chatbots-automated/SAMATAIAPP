import { jsPDF } from 'jspdf';
import { Estimate } from '@/types/estimate';

export async function generatePDF(estimate: Estimate): Promise<Blob> {
  try {
    const doc = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
    });

    // Add custom font
    doc.setFont('helvetica', 'normal');
    
    // Header
    doc.setFillColor(52, 152, 219);
    doc.rect(0, 0, 210, 40, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(24);
    doc.text('ESTIMATE', 20, 20);
    
    doc.setFontSize(12);
    doc.text(`#${estimate.id.substring(0, 8).toUpperCase()}`, 20, 30);
    
    // Project Details
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(14);
    doc.text('Project Details', 20, 50);
    
    doc.setFontSize(12);
    doc.text(`Project: ${estimate.projectName}`, 20, 60);
    doc.text(`Client: ${estimate.clientName || 'N/A'}`, 20, 70);
    doc.text(`Date: ${new Date(estimate.createdAt).toLocaleDateString()}`, 20, 80);
    
    // Materials Section
    let yPos = 100;
    doc.setFontSize(14);
    doc.text('Materials', 20, yPos);
    yPos += 10;
    
    // Materials Table Header
    doc.setFillColor(240, 240, 240);
    doc.rect(20, yPos, 170, 8, 'F');
    doc.setFontSize(10);
    doc.text('Item', 22, yPos + 6);
    doc.text('Quantity', 82, yPos + 6);
    doc.text('Price', 122, yPos + 6);
    doc.text('Total', 162, yPos + 6);
    yPos += 12;
    
    // Materials Table Content
    estimate.materials.forEach((material) => {
      doc.setFontSize(10);
      doc.text(material.name, 22, yPos);
      doc.text(`${material.quantity} ${material.unit}`, 82, yPos);
      doc.text(`€${material.pricePerUnit.toFixed(2)}`, 122, yPos);
      doc.text(`€${(material.quantity * material.pricePerUnit).toFixed(2)}`, 162, yPos);
      yPos += 8;
    });
    
    // Labor Section
    yPos += 10;
    doc.setFontSize(14);
    doc.text('Labor', 20, yPos);
    yPos += 10;
    
    doc.setFontSize(10);
    if (estimate.labor.rateType === 'hourly') {
      doc.text(`${estimate.labor.hours} hours @ €${estimate.labor.rate}/hour`, 20, yPos);
      doc.text(`€${(estimate.labor.hours! * estimate.labor.rate).toFixed(2)}`, 162, yPos);
    } else {
      doc.text('Fixed Price', 20, yPos);
      doc.text(`€${estimate.labor.rate.toFixed(2)}`, 162, yPos);
    }
    
    // Totals Section
    yPos += 20;
    doc.setDrawColor(200, 200, 200);
    doc.line(20, yPos, 190, yPos);
    yPos += 10;
    
    doc.setFontSize(12);
    const subtotal = estimate.totalCost / (1 + estimate.taxRate / 100);
    const tax = estimate.totalCost - subtotal;
    
    doc.text('Subtotal:', 120, yPos);
    doc.text(`€${subtotal.toFixed(2)}`, 162, yPos);
    yPos += 8;
    
    doc.text(`Tax (${estimate.taxRate}%):`, 120, yPos);
    doc.text(`€${tax.toFixed(2)}`, 162, yPos);
    yPos += 8;
    
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Total:', 120, yPos);
    doc.text(`€${estimate.totalCost.toFixed(2)}`, 162, yPos);
    
    // Notes Section
    if (estimate.notes) {
      yPos += 20;
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(14);
      doc.text('Notes:', 20, yPos);
      yPos += 10;
      doc.setFontSize(10);
      doc.text(estimate.notes, 20, yPos, { maxWidth: 170 });
    }
    
    // Footer
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text('Generated by SmartEstimate Pro', 20, 285);
    
    return doc.output('blob');
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
}